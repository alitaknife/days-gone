// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// FileDao is the manager for logic model data accessing and custom defined data operations functions management.
type FileDao struct {
	Table   string      // Table is the underlying table name of the DAO.
	Group   string      // Group is the database configuration group name of current DAO.
	Columns FileColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// FileColumns defines and stores column names for table file.
type FileColumns struct {
	Id       string //
	FileSha1 string // 文件hash
	FileName string // 文件名
	FileSize string // 文件大小
	FileAddr string // 文件存储位置
	CreateAt string // 创建日期
	UpdateAt string // 更新日期
	Status   string // 状态(可用/禁用/已删除等状态)
	Ext1     string // 备用字段1
	Ext2     string // 备用字段2
}

//  fileColumns holds the columns for table file.
var fileColumns = FileColumns{
	Id:       "id",
	FileSha1: "file_sha1",
	FileName: "file_name",
	FileSize: "file_size",
	FileAddr: "file_addr",
	CreateAt: "create_at",
	UpdateAt: "update_at",
	Status:   "status",
	Ext1:     "ext1",
	Ext2:     "ext2",
}

// NewFileDao creates and returns a new DAO object for table data access.
func NewFileDao() *FileDao {
	return &FileDao{
		Group:   "default",
		Table:   "file",
		Columns: fileColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *FileDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *FileDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *FileDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
