// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// UserDao is the manager for logic model data accessing and custom defined data operations functions management.
type UserDao struct {
	Table   string      // Table is the underlying table name of the DAO.
	Group   string      // Group is the database configuration group name of current DAO.
	Columns UserColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// UserColumns defines and stores column names for table user.
type UserColumns struct {
	Id             string //
	UserName       string // 用户名
	UserNickname   string // 用户昵称
	UserPwd        string // 用户encoded密码
	Salt           string // 密码盐
	Avatar         string // 用户头像
	Sex            string // 性别;0:女,1:男,2:保密
	Email          string // 邮箱
	Phone          string // 手机号
	EmailValidated string // 邮箱是否已验证
	PhoneValidated string // 手机号是否已验证
	SignUpAt       string // 注册日期
	LastActive     string // 最后活跃时间戳
	Profile        string // 用户属性
	Status         string // 账户状态(启用/禁用/锁定/标记删除等)
}

//  userColumns holds the columns for table user.
var userColumns = UserColumns{
	Id:             "id",
	UserName:       "user_name",
	UserNickname:   "user_nickname",
	UserPwd:        "user_pwd",
	Salt:           "salt",
	Avatar:         "avatar",
	Sex:            "sex",
	Email:          "email",
	Phone:          "phone",
	EmailValidated: "email_validated",
	PhoneValidated: "phone_validated",
	SignUpAt:       "sign_up_at",
	LastActive:     "last_active",
	Profile:        "profile",
	Status:         "status",
}

// NewUserDao creates and returns a new DAO object for table data access.
func NewUserDao() *UserDao {
	return &UserDao{
		Group:   "default",
		Table:   "user",
		Columns: userColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
