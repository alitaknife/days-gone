// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

// UserFileDao is the manager for logic model data accessing and custom defined data operations functions management.
type UserFileDao struct {
	Table   string          // Table is the underlying table name of the DAO.
	Group   string          // Group is the database configuration group name of current DAO.
	Columns UserFileColumns // Columns is the short type for Columns, which contains all the column names of Table for convenient usage.
}

// UserFileColumns defines and stores column names for table user_file.
type UserFileColumns struct {
	Id         string //
	UserName   string //
	FileSha1   string // 文件hash
	FileSize   string // 文件大小
	FileName   string // 文件名
	UploadAt   string // 上传时间
	LastUpdate string // 最后修改时间
	Status     string // 文件状态(0：正常，1：禁用)
	IsDelete   string // 是否已经删除(0：否，1：是)
}

//  userFileColumns holds the columns for table user_file.
var userFileColumns = UserFileColumns{
	Id:         "id",
	UserName:   "user_name",
	FileSha1:   "file_sha1",
	FileSize:   "file_size",
	FileName:   "file_name",
	UploadAt:   "upload_at",
	LastUpdate: "last_update",
	Status:     "status",
	IsDelete:   "is_delete",
}

// NewUserFileDao creates and returns a new DAO object for table data access.
func NewUserFileDao() *UserFileDao {
	return &UserFileDao{
		Group:   "default",
		Table:   "user_file",
		Columns: userFileColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *UserFileDao) DB() gdb.DB {
	return g.DB(dao.Group)
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *UserFileDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.Table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *UserFileDao) Transaction(ctx context.Context, f func(ctx context.Context, tx *gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
